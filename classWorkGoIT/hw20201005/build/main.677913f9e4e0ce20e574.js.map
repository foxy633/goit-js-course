{"version":3,"sources":["webpack:///./js/countdown-timer.js","webpack:///./js/timer.js","webpack:///./js/delay-ms.js","webpack:///./js/toggle-user-state.js","webpack:///./js/make-transaction.js","webpack:///./js/color-switch.js"],"names":["CountdownTimer","selector","targetDate","this","_selector","_targetDate","getTimeLeft","total","Date","parse","days","Math","floor","hours","mins","secs","playClock","clock","document","querySelector","daysSpan","hoursSpan","minsSpan","secsSpan","timeinterval","setInterval","t","clearInterval","innerHTML","slice","addEventListener","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","random","id","logSuccess","logError","warn","amount","catch","intervalId","colors","refs","startBtn","stopBtn","setColor","color","length","body","style","backgroundColor","disabled"],"mappings":"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","file":"main.677913f9e4e0ce20e574.js","sourcesContent":["export default class CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this._selector = selector;\r\n    this._targetDate = targetDate;\r\n  }\r\n\r\n  getTimeLeft() {\r\n    const total = Date.parse(this._targetDate) - Date.parse(new Date());\r\n    return {\r\n      total: total,\r\n      days: Math.floor(total / (1000 * 60 * 60 * 24)),\r\n      hours: Math.floor((total / (1000 * 60 * 60)) % 24),\r\n      mins: Math.floor((total / 1000 / 60) % 60),\r\n      secs: Math.floor((total / 1000) % 60),\r\n    };\r\n  }\r\n\r\n  playClock() {\r\n    const clock = document.querySelector(this._selector);\r\n    const daysSpan = clock.querySelector('.value[data-value=\"days\"]');\r\n    const hoursSpan = clock.querySelector('.value[data-value=\"hours\"]');\r\n    const minsSpan = clock.querySelector('.value[data-value=\"mins\"]');\r\n    const secsSpan = clock.querySelector('.value[data-value=\"secs\"]');\r\n    const updateClock = () => {\r\n      const t = this.getTimeLeft(this._targetDate);\r\n      if (t.total < 0) {\r\n        clearInterval(timeinterval);\r\n        return;\r\n      }\r\n      daysSpan.innerHTML = t.days;\r\n      hoursSpan.innerHTML = ('0' + t.hours).slice(-2);\r\n      minsSpan.innerHTML = ('0' + t.mins).slice(-2);\r\n      secsSpan.innerHTML = ('0' + t.secs).slice(-2);\r\n    };\r\n\r\n    const timeinterval = setInterval(updateClock, 1000);\r\n  }\r\n}\r\n","import CountdownTimer from './countdown-timer';\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const clock = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('Jul 17, 2021'),\r\n  });\r\n\r\n  clock.playClock();\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n  // function getTimeLeft(endtime) {\r\n  //   const total = Date.parse(endtime) - Date.parse(new Date());\r\n  //   const days = Math.floor(total / (1000 * 60 * 60 * 24));\r\n  //   const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\r\n  //   const mins = Math.floor((total / 1000 / 60) % 60);\r\n  //   const secs = Math.floor((total / 1000) % 60);\r\n\r\n  //   return {\r\n  //     total,\r\n  //     days,\r\n  //     hours,\r\n  //     mins,\r\n  //     secs,\r\n  //   };\r\n  // }\r\n\r\n  // function playClock(id, endtime) {\r\n  //   const clock = document.getElementById(id);\r\n  //   const daysSpan = clock.querySelector('.value[data-value=\"days\"]');\r\n  //   const hoursSpan = clock.querySelector('.value[data-value=\"hours\"]');\r\n  //   const minsSpan = clock.querySelector('.value[data-value=\"mins\"]');\r\n  //   const secsSpan = clock.querySelector('.value[data-value=\"secs\"]');\r\n  //   function updateClock() {\r\n  //     const t = getTimeLeft(endtime);\r\n  //     daysSpan.innerHTML = t.days;\r\n  //     hoursSpan.innerHTML = ('0' + t.hours).slice(-2);\r\n  //     minsSpan.innerHTML = ('0' + t.mins).slice(-2);\r\n  //     secsSpan.innerHTML = ('0' + t.secs).slice(-2);\r\n  //     if (t.total <= 0) {\r\n  //       clearInterval(timeinterval);\r\n  //     }\r\n  //   }\r\n  //   updateClock();\r\n  //   const timeinterval = setInterval(updateClock, 1000);\r\n  // }\r\n\r\n  // const deadline = new Date(Date.parse(new Date()) + 5 * 24 * 60 * 60 * 1000);\r\n  // //new Date(Date.now() + 100000000000);\r\n  // console.log(deadline);\r\n\r\n  // playClock('timer-1', deadline);\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n  // Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n  const delay = ms => {\r\n    // Твой код\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms);\r\n      }, ms);\r\n    });\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n  // Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      );\r\n      resolve(updatedUsers);\r\n    });\r\n  };\r\n\r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n  /*\r\n   * Сейчас работает так\r\n   */\r\n  //   toggleUserState(users, 'Mango', logger);\r\n  //   toggleUserState(users, 'Lux', logger);\r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n});\r\n","document.addEventListener('DOMContentLoaded', () => {\r\n  // Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = transaction => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n          resolve({ id: transaction.id, time: delay });\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n  /*\r\n   * Работает так\r\n   */\r\n  //   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n  //   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n  //   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n  //   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Должно работать так\r\n   */\r\n\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n});\r\n","const colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n];\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst refs = {\r\n  startBtn: document.querySelector('button[data-action=\"start\"]'),\r\n  stopBtn: document.querySelector('button[data-action=\"stop\"]'),\r\n};\r\n\r\nsetColor = () => {\r\n  const color = colors[randomIntegerFromInterval(0, colors.length - 1)];\r\n  document.body.style.backgroundColor = color;\r\n};\r\n\r\n// let intervalId = -1;\r\n// refs.startBtn.addEventListener('click', () => {\r\n//   if (intervalId === -1) {\r\n//     intervalId = setInterval(() => setColor(), 1000);\r\n//   }\r\n// });\r\n\r\n// refs.stopBtn.addEventListener('click', () => {\r\n//   clearInterval(intervalId);\r\n//   intervalId = -1;\r\n// });\r\n\r\nlet intervalId;\r\nrefs.startBtn.addEventListener('click', () => {\r\n  intervalId = setInterval(() => setColor(), 1000);\r\n  refs.startBtn.disabled = true;\r\n});\r\n\r\nrefs.stopBtn.addEventListener('click', () => {\r\n  clearInterval(intervalId);\r\n  refs.startBtn.disabled = false;\r\n});\r\n"],"sourceRoot":""}